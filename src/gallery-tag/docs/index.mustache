<div class="intro">
    <p>The Tag module provides a way to hook into Node creation and insertion. This allows you to build simple to use and powerful components that behave more like standard DOM nodes.</p>
</div>

{{>getting-started}}

<h2>Using Tag</h2>

<p>CSS Selectors are used to attach additional functionality (mixins) to Nodes. Nodes will be matched whether they are present on page load or created dynamically.</p>

<h4>Registering Tags</h4>

```
// Tag selector matches all copyright tags
Y.Tag.register('copyright', {
    created: function(config) {
        this.addAttr('name', {value: config.name})
        this.get('host').setHTML('Copyright &copy; ' + (new Date().getFullYear()) + ' ' + this.get('name'));
    }
});
```

<p>When registering a tag, `data-` attributes are passed in as config parameters. Dashes are used for camelization (i.e. `data-full-name` would be passed as `config.fullName`).</p>

```
<copyright data-name="Foo Inc."></copyright> <!-- Copyright Â© 2012 Foo Inc. -->
```

<p>Every Node has a `tag` plugin already created. The plugin is the receiver of a registered mixin.</p>

```
Y.one('copyright').tag.get('name'); // Foo Inc.
```

<h4>Registering Attributes</h4>

<p>Registering attributes is a way to provide more graceful degredation to your elements. You could also register both an attribute and a tag to provide more flexible usage.</p>

```
// Attribute selector matches all highlight attributes
Y.Tag.register('[highlight]', {
    created: function(config) {
        var host = config.get('host'),
            text = host.getHTML().replace(config.word, '<b>' + config.word + '</b>');

        host.setHTML(text);
    }
});

Y.Tag.register('example, [example]', {});
```

<p>When registering an attribute, the attribute name becomes a namespace for config parameters.</p>

```
<!-- Bolds "elit" -->
<p highlight highlight:word="elit">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> 
```

<h2>How It Works</h2>

<p>gallery-event-inserted</p>

<h2>Registry</h2>

<h2>About</h2>

<p>X-Tag was the initial inspiration, however the Tag module goes beyond the current implementation and allows you to register attributes in addition to tags.</p>