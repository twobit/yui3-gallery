<div class="intro">
    <p>The Tag module provides a way to hook into Node creation and insertion. This allows you to build simple to use and powerful components that behave more like standard DOM nodes.</p>
</div>

{{>getting-started}}

<h2>Using Tag</h2>

<p>To hook into Node creation you must first specify what kind of node to hook into and what should be done on creation. You do that by registering a simple CSS selector and a mixin. If a node is found to match the selector, the mixin is applied and its `created` method is called.</p>

<h4>Registering Tags</h4>

```
// Tag selector matches all ydate tags
Y.Tag.register('ydate', {
    created: function(config) {
        this.addAttr('date', {
            value: new Date(),
            setter: function(value) {
                this.get('host').setHTML(Y.DataType.Date.format(value, {format: config.format}));
                return value;
            }
        });
    }
});
```

<p>When registering a tag, `data-` attributes are passed in as config parameters. Dashes are used for camelization (i.e. `data-full-name` would be passed as `config.fullName`).</p>

```
<!-- Copyright Â© 2012 Yahoo! Inc. -->
Copyright &copy; <ydate data-format="%Y"></ydate> Yahoo! Inc.
```

<p>Every Node has a `tag` plugin already created. The plugin is the receiver of a registered mixin.</p>

```
Y.one('ydate').tag.get('date');
```

<p>Nodes will always be matched whether they are present on page load or created dynamically. That means creating a new component is often as simple as `Y.Node.create(...)`. Supported selectors are limited to tags and attributes.</p>

```
Y.one('body').append('<ydate data-format="%T"></ydate>');
```

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/hqRtV/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0" style="max-width: 750px;"></iframe>

<h4>Registering Attributes</h4>

<p>Registering attributes is a way to provide more graceful degredation to your elements. You could also register both an attribute and a tag to provide more flexible usage.</p>

```
// Attribute selector matches all highdpi attributes
Y.Tag.register('[highdpi]', {
    created: function(config) {
        if (Y.config.win.devicePixelRatio <= 1) {return;}

        var host = this.get('host'),
            alt = config.alt || '@2x',
            src = host.get('src').replace(/(\.[a-zA-Z]+)$/, function(m) {return alt + m;});

        if (src) {
            Y.io(src, {
                method: 'HEAD',
                onsuccess: function(e) {
                    host.set('src', src);
                }
            });
        }
    }
});

Y.Tag.register('example, [example]', {});
```

<p>When registering an attribute, the attribute name becomes a namespace for config parameters. It's possible to have a tag and many different attributes all with separate configs.</p>

```
<!-- Updates image with higher resolution if large_photo@4x.jpg exists -->
<img highdpi highdpi:alt="@4x" src="large_photo.jpg" />

<!-- Registered tag and multiple attributes with configs -->
<foo data-name="Foo Inc." bar bar:name="Bar Inc." baz baz:name="Baz Inc."></foo>
```

<h4>Inserted Event</h4>

<p>When a registered tag has been created it can listen for the `tag:inserted` event. This event is fired when the tag is added to the document. Most tags will do their work in the created method however more complicated tags like widgets can do things like bind to click events or render once they are part of the document.</p>

<h2>How It Works</h2>

<p>`gallery-event-inserted` provides the magic behind the `tag:inserted` event. It uses CSS3 Animation to create efficient inserted events. If CSS3 Animation is unsupported it falls back to using the slower DOMNodeInserted mutation event.</p>

<h2>Why Tag</h2>

<p>The main benefit to using Tag is to reduce the amount of boilerplate instantiation code most large web apps accumulate. When dynamically creating components nothing could be simpler than creating a tag with attributes. It also becomes very simple for those less familiar with Javascript to make use of widgets. They don't need to know valid Javascript syntax, HTML has a far lower barrier to entry.</p>

<h2>Registry</h2>

<p>There are many predefined tags available in the Tag Registry. `tag-ybind` is one of the most useful, it provides data binding using HTML. To use, include the following in your YUI config:</p>

```
YUI({
    //Last Gallery Build of this module
    gallery: 'gallery-2012.07.18-13-22',
    groups: {tag: {
        combine: true,
        root: 'gallery-2012.07.18-13-22',
        patterns: {'tag-': {configFn: function(cfg) {
            cfg.path = '/build/gallery-tag-registry/' + cfg.name + '-min.js'
        }}}
    }}
}).use(/* 'tag-yautocomplete', 'tag-ybind', '...etc' */);
```

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/hqRtV/4/embedded/" allowfullscreen="allowfullscreen" frameborder="0" style="max-width: 750px;"></iframe>

<table class="yui-table">
<thead>
    <tr>
        <th>Name</th>
        <th>Description</th>
        <th>Module</th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>`yautocomplete`</td>
        <td>Wrapper for AutoComplete.</td>
        <td>tag-yautocomplete</td>
    </tr>
    <tr>
        <td>`ybind`</td>
        <td>Provides support for data binding.</td>
        <td>tag-ybind</td>
    </tr>
    <tr>
        <td>`ybutton`</td>
        <td>Wrapper for Button.</td>
        <td>tag-ybutton</td>
    </tr>
    <tr>
        <td>`ycalendar`</td>
        <td>Wrapper for Calendar.</td>
        <td>tag-ycalendar</td>
    </tr>
    <tr>
        <td>`ydial`</td>
        <td>Wrapper for Dial.</td>
        <td>tag-ydial</td>
    </tr>
    <tr>
        <td>`yoverlay`</td>
        <td>Wrapper for Overlay.</td>
        <td>tag-yoverlay</td>
    </tr>
    <tr>
        <td>`ytemplate`</td>
        <td>Creates a template using Y.Lang.sub. Replaces all text between double brackets.</td>
        <td>tag-ytemplate</td>
    </tr>
</tbody>
</table>

<h2>About</h2>

<p><a href="http://mozilla.github.com/x-tag/">X-Tag</a> was the initial inspiration, however the Tag module goes beyond the current implementation and allows you to register attributes in addition to tags.</p>

<p>Compatibility: IE9+, FF5+, Chrome 4+, Safari/iOS 4+, Android 2.1+</p>
